<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>syntax on opensource-philosophy</title>
    
    
    
    <link>https://Perangelot.github.io/tags/syntax/</link>
    <description>Recent content in syntax on opensource-philosophy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 Apr 2022 00:00:00 +0200</lastBuildDate>
    
	<atom:link href="https://Perangelot.github.io/tags/syntax/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Functional Completeness</title>
      <link>https://Perangelot.github.io/posts/functional-completeness-vom-08.04.2022/</link>
      <pubDate>Fri, 08 Apr 2022 00:00:00 +0200</pubDate>
      
      <guid>https://Perangelot.github.io/posts/functional-completeness-vom-08.04.2022/</guid>
      <description>
        
          
          
          
        
        
        
          In most definitions of classical logic, some connectives are introduced as abbreviations of other, so-called primitive connectives. But why does it work, and why should one bother instead of just introducing every connective as primitive? In this post, I am going to tackle these questions by explaining what functional completeness is and how it is used.
          
        
        </description>
    </item>
    
  </channel>
</rss>