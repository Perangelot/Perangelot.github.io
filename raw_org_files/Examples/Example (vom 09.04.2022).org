#+title: Example
#+hugo_base_dir: ../
#+startup: latexpreview
#+options: tex:dvisvgm
#+LATEX_CLASS_OPTIONS: dvisvgm

#+LATEX_HEADER: \usepackage{array,tabularray}
#+LATEX_HEADER: \newenvironment{chain}[1][$\leftrightarrow$]%
#+LATEX_HEADER:{\begin{tblr}
#+LATEX_HEADER:{colspec={lc@{#1 \hskip \tabcolsep}ll}, 
#+LATEX_HEADER:column{2-4} = {mode=dmath}, 
#+LATEX_HEADER:cell{1}{1}={mode=dmath}}
#+LATEX_HEADER:}%
#+LATEX_HEADER:{\end{tblr}}

\begin{equation}
\text{``}\exists\mathit{x}\,\text{''} 
\text{ abbreviates } 
\text{``} \lnot \forall\mathit{x}\lnot\text{''}
\end{equation}


\begin{equation}
\text{``}\exists\mathit{x}\,\text{''} 
\text{ abbreviates } 
\text{``} \lnot \, h \forall\mathit{x}\lnot\text{''}
\end{equation}


\begin{chain}
    \neg \forall x \mathit{x} \mathit{A}   && \kgrün{\neg \forall \mathit{x}\, \lnot }\lnot \mathit{A} \hphantom{\lnot\lnot } & DN \\
    && \exists \mathit{x} \, \lnot \mathit{A}   & Def_\exists  
\end{chain} \vskip 2em

\begin{chain}
  \forall \mathit{x} b \mathit{A} \hphantom{\lnot }  && \lnot \kgrün{\lnot \forall \mathit{x} \, \lnot}\lnot \mathit{A} \hphantom{\lnot} &  DN  \\
         &&  \lnot \exists \mathit{x} \, \lnot \mathit{A}   & Def_\exists  
\end{chain}

\begin{chain}
    \forall \mathit{x}\,\lnot h  \mathit{A}   && \lnot \kgrün{\neg \forall \mathit{x} \, e \lnot } \mathit{A} \hphantom{\lnot\lnot }& DN \\
    && \lnot \dgelb{\exists \mathit{x}} \mathit{A}   & Def_\exists  
\end{chain}

#+BEGIN_SRC lisp
(defun org-html-latex-environment (latex-environment _contents info)
  "Transcode a LATEX-ENVIRONMENT element from Org to HTML.
CONTENTS is nil.  INFO is a plist holding contextual information."
  (let ((processing-type (plist-get info :with-latex))
	(latex-frag (org-remove-indentation
		     (org-element-property :value latex-environment)))
        (attributes (org-export-read-attribute :attr_html latex-environment))
        (label (org-html--reference latex-environment info t))
        (caption (and (org-html--latex-environment-numbered-p latex-environment)
		      (number-to-string
		       (org-export-get-ordinal
			latex-environment info nil
			(lambda (l _)
			  (and (org-html--math-environment-p l)
			       (org-html--latex-environment-numbered-p l))))))))
    (cond
     ((memq processing-type '(t mathjax))
      (org-html-format-latex
       (if (org-string-nw-p label)
	   (replace-regexp-in-string "\\`.*"
				     (format "\\&\n\\\\label{%s}" label)
				     latex-frag)
	 latex-frag)
       'mathjax info))
     ((assq processing-type org-preview-latex-process-alist)
      (let ((formula-link
             (org-html-format-latex latex-frag
              processing-type info)))
        (when (and formula-link (string-match "file:\\([^]]*\\)" formula-link))
          (let ((source (org-export-file-uri (match-string 1 formula-link))))
	    (org-html--wrap-latex-environment
	     (org-html--format-image source attributes info)
	     info caption label)))))
     (t (org-html--wrap-latex-environment latex-frag info caption label)))))
#+END_SRC

      (let ((formula-link
             (org-html-format-latex latex-frag) 

→ 

      (let ((formula-link  latex-frag)
