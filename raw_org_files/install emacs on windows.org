#+title: Example Post
#+date: <2022-01-27 Thu 13:49>
#+hugo_base_dir: ../
#+hugo_section: posts
#+hugo_type: post
#+hugo_custom_front_matter: :tikzjax true
#+hugo_lastmod: <2022-01-28 Fri 14:00>
#+hugo_tags: test example "syntax highlighting"
#+csl-style: ../static/apa.csl
#+csl-locale: en-us

#+description: In this post, I will guide you through installing emacs on Windows in such a way that all features an emacs-installation on a linux machine would have.

* The Problem with emacs on Windows
Originally, emacs was developed in [[https://www.jwz.org/doc/emacs-timeline.html][1976]] and has been developed ever
since, so it is no wonder it is available for all major operating
systems. Nonetheless, it depends on packages which are not natively
available on Windows, so by default, quite some features of emacs
available on Linux do not work for the Windows Version.

This should be one more reason [Link] for you to consider changing to
an open-source operating system such as Linux. Please do not just
gloss over this point. Next to security reasons, user-configurability
and extendeability, there are compelling arguments -- both
politcal and ethical -- why you should not support big-tech
companies. Plus there is [[https://en.wikipedia.org/wiki/Tux_(mascot)][Tux]], the mascot of Linux. And who does not
want a penguin as their mascot?

That being said, some people depend on Windows if they like it or not
(although many people only think this is the case, esepecially in
academia [Link]), and if they want to use an open-source text editor
instead of Word, this is a big plus already. So, let's get into 
* The Solution to the Problem
Since Windows is not capable of providing a satisfactory emacs
experience but Linux is, we simply import all the necessary linux
libraries to windows. There are many ways to achieve this, but the one
preferred by me is using =msys2=. =msys2= is an open-source software based
on =cygwin= which does exactly what we need: Provide the necessary tools
to build Linux software natively in Windows. So let's install it!
** installing =msys2=
Visit the [[https://www.msys2.org/][website]] of =msys2= and download the latest windows
installer. Double-click it and follow the steps of the installation
wizard. I installed it to =C:\msys64=. 

Warning: Do /not/ open any other of the =.exe= files. Following the below
steps with the wrong executable opened /will/ cause problems.
** configuring =msys2=
Go to =C:\msys64\home\<user>= and open =.bash.rc= with =notepad= by
   double-clicking on the file and, if necessary, selecting the
   notepad among the list of programs. Then, add the following code to
   the end of the file:
#+BEGIN_EXPORT bash
if [ $(uname -o) == 'Msys' ]; then
    export PATH=`echo ${PATH} | awk -v RS=: -v ORS=: '/c\// {next} {print}' | sed 's/:*$//'`
fi
#+END_EXPORT
This code snippet makes sure that issuing a command in =msys2= which
happens to have the same name as a windows command won't cause
problems. Lastly, we want to make sure that =msys2= is recognized by
Windows. We do that by setting a so-called =PATH= variable. With that,
we just tell Windows to look for executables in that path. This way,
we make sure that Windows finds =msys2=. Open the application launcher
by pressing the Windows key, type in "environment variables" and click
on the first result.

And with that, =msys2= is configured! You can now back to =C:\msys64= and
open =mingw64.exe=. Press on "environment variables" again, select
"path" and click on "edit". If you have administrator rights, you can
now click on "New" and add both the path to =msys2= and its subfolder
=/bin=. For me, this was =C:\msys64\mingw64= and = path 

* Preparing to install emacs
Now we have the means to get everything we need to build emacs, but
have we not got anything yet. Thus, the next step is to do just
that. Conveniently, =msys2= also uses =pacman=, the package manager which
by default ships with Arch Linux, so it might even be familiar to you. 
** Installing build dependencies
First of all, we want to make sure that our package manage is up-to-date:
#+BEGIN_EXPORT bash
pacman -Syu
#+END_EXPORT
The flags =S=, =y= and =u= stand for "Sync", "refresh" and "sysupdate",
respectively. That being done, we install all tools we need to build
emacs from source, starting with the most important ones:
#+BEGIN_EXPORT bash
pacman -Sy
pacman -Sy\
    --needed \
    filesystem \
    msys2-runtime \
    bash \
    libreadline \
    libiconv \
    libarchive \
    libgpgme \
    libcurl \
    pacman \
    ncurses \
    libintl
#+END_EXPORT
Now we'll ned to update =pacman= again:
#+BEGIN_EXPORT bash
pacman -Su
#+END_EXPORT
Finally, we will download and install the necessary
libraries. Depending on your download speed and your hardware, this
will take quite a while. Perfect time to rethink whether you really
need Windows. Remember you can also have two systems installed on your
machine [Link] to try out Linux! 
#+BEGIN_EXPORT bash
pacman -Su \
    autoconf \
    autogen \
    automake \
    automake-wrapper \
    diffutils \
    git \
    guile \
    libgc \
    libguile \
    libidn-devel \
    libltdl \
    libnettle-devel \
    libopenssl \
    libp11-kit-devel \
    libtasn1-devel \
    libunistring \
    make \
    mingw-w64-x86_64-binutils \
    mingw-w64-x86_64-bzip2 \
    mingw-w64-x86_64-cairo \
    mingw-w64-x86_64-crt-git \
    mingw-w64-x86_64-dbus \
    mingw-w64-x86_64-expat \
    mingw-w64-x86_64-fontconfig \
    mingw-w64-x86_64-freetype \
    mingw-w64-x86_64-gcc \
    mingw-w64-x86_64-gcc-libs \
    mingw-w64-x86_64-gdk-pixbuf2 \
    mingw-w64-x86_64-gettext \
    mingw-w64-x86_64-giflib \
    mingw-w64-x86_64-glib2 \
    mingw-w64-x86_64-gmp \
    mingw-w64-x86_64-gnutls \
    mingw-w64-x86_64-harfbuzz \
    mingw-w64-x86_64-headers-git \
    mingw-w64-x86_64-imagemagick \
    mingw-w64-x86_64-isl \
    mingw-w64-x86_64-jansson \
    mingw-w64-x86_64-libffi \
    mingw-w64-x86_64-libgccjit \
    mingw-w64-x86_64-libiconv \
    mingw-w64-x86_64-libidn2 \
    mingw-w64-x86_64-libjpeg-turbo \
    mingw-w64-x86_64-libpng \
    mingw-w64-x86_64-librsvg \
    mingw-w64-x86_64-libsystre \
    mingw-w64-x86_64-libtasn1 \
    mingw-w64-x86_64-libtiff \
    mingw-w64-x86_64-libunistring \
    mingw-w64-x86_64-libwinpthread-git \
    mingw-w64-x86_64-libxml2 \
    mingw-w64-x86_64-mpc \
    mingw-w64-x86_64-mpfr \
    mingw-w64-x86_64-nettle \
    mingw-w64-x86_64-p11-kit \
    mingw-w64-x86_64-pango \
    mingw-w64-x86_64-pixman \
    mingw-w64-x86_64-poppler \
    mingw-w64-x86_64-winpthreads \
    mingw-w64-x86_64-xpm-nox \
    mingw-w64-x86_64-xz \
    mingw-w64-x86_64-zlib \
    mingw-w64-x86_64-jbigkit \
    nano \
    openssl \
    pkgconf \
    tar \
    texinfo \
    wget
#+END_EXPORT
Having done this, we could in principle compile emacs from
source. What we should not forget, though, is that emacs lives from
packages -- and they also have dependencies which we need to
install. Of course, then, the code below might not suffice to cover
all dependencies your packages need. Nonetheless, it takes care of the most
important ones: =hunspell= to make spell-checking work and =poppler= to
allow =pdf-tools= to open =.pdf= files. =sqlite= already is installed with
the binaries above, so =org-roam= will work.
#+BEGIN_EXPORT latex
pacman -S mingw-w64-x86_64-hunspell \
          mingw-w64-x86_64-poppler
          mingw-w64-x86_64-poppler-data
#+END_EXPORT
Note that whilst only an english dictionary is available via =msys2=,
you can add your dictionaries of any language you like by putting them
in =C:\msys64\mingw64\share\hunspell=. Of course, you will need to
adjust the emacs code, too, then.

For those who want to use emacs as a =LaTeX= editor or like having their
formulas overlayed with =org-preview=, you should also install the =texlive=
binaries. This installation should happen without the help of msys2;
if you already have a LaTeX distribution installed, emacs will
recognize it once it is configured. If not, you need to install it. The
easiest way I have found is to use an =.iso= [[https://www.tug.org/texlive/acquire-iso.html][image]], but there are other
possibilities as well.

If you think of using =mu4e= as your emacs client on Windows, this might be a
problem because there is no =msys2= package for =mu=. You might try your
look with an [[https://github.com/msys2-unofficial/MSYS2-packages/tree/master/mu][unofficial package]], though.
* Building emacs
Now we have done everything we need to start with the actual building
process. First of all, we need to download the source code. We are
doing this by cloning an official git repository:
#+BEGIN_EXPORT bash
git clone http://git.savannah.gnu.org/r/emacs.git
#+END_EXPORT
** Configuring the installation
Next up, we need to tell emacs what (not) to build. I have chosen to
go with every sensible dependency to cover all needs:
    #+BEGIN_EXPORT bash
export PATH=/mingw64/bin:$PATH
./autogen.sh
./configure \
    --prefix=C:/Users/Vitus/AppData/Roaming
    --host=x86_64-w64-mingw32 \
    --target=x86_64-w64-mingw32 \
    --build=x86_64-w64-mingw32 \
    --with-native-compilation \
    --with-gnutls \
    --with-imagemagick \
    --with-jpeg \
    --with-json \
    --with-png \
    --with-rsvg \
    --with-tiff \
    --with-wide-int \
    --with-xft \
    --with-xml2 \
    --with-xpm \
    'CFLAGS=-I/mingw64/include/noX'
    #+END_EXPORT
** building emacs
Now, we're finally ready to do the last step: Actually installing
emacs! This will take at least 10 minutes, possibly up to 30. Just run
the following code:
#+BEGIN_EXPORT bash
make
make install 
#+END_EXPORT
** Setting the Paths
emacs has now been 
With this, you have built your own emacs from source --
Congratulations! To run emacs, we still need to put two files in the
binary folder: =libdbus-1-3.dll= and =libgmp-10.dll=. You can download
them [[https://www.exefiles.com/de/dll/libdbus-1-3-dll/][here]] and [[https://www.dll-files.com/libgmp-10.dll.html][here]], respectively. Just put them in
=C:\Users\<user>\AppData\Roaming\bin=.


* Setting up emacs server
Since emacs is not a Windows program, its performance on Windows is,
to put it mildly, not out of this world. Especially if
you have a longer configuration, it might take half a minute or even
more to get it started. This of course, completely interferes with
your workflow, so we'll need to find a way to deal with that. And the
way to go is as simple as silently starting emacs at startup and
letting it pop up whenever we want to edit a file in it. This
running-in-the-background service is called a server or a daemon. So
let's set it up!

10. Set Paths
- for msys + bin/ + mingw64/
11. in den Überordner von bin/ .emacs packen
12. eventuell pakete nachinstallieren

# Only needed for standalone dist (wo MSYS2 env)
# cp /mingw64/bin/*.dll $target

#+END_EXPORT



Scoop installieren 
Powershell als Administrator öffnen 
Set-ExecutionPolicy RemoteSigned -scope CurrentUser eingeben und für alle bestätigen 
Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh') eingeben 
scoop install git git installieren 
scoop update scoop updaten 
Emacs installieren 
scoop bucket add extras 
scoop install emacs 
msys2 installieren 
scoop install msys2 
msys2 
Powershell neustarten 
Graphviz installieren (für org-roam-graph): scoop install graphviz 
Msys2-Installationen: 
Hunspell (für Rechtschreibprüfung): 
Powershell: msys2 
pacman -S mingw-w64-x86_64-hunspell mingw-w64-x86_64-hunspell-en  
Deutsches Wörterbuch hinzufügen (DE_Frami) 
TeXLive (für LaTeX): pacman -S mingw-w64-x86_64-texlive-full 
C-Compiler (für org-roam): pacman -S gcc (über cmd → mingw64 RET) 
System → Umgebungsvariable → Neu → Name: HOME, Pfad: C:\Users\Vitus\scoop 
Msys zum Pfad hinzufügen:  
C:\Users\Vitus\scoop\apps\msys2\2021-06-04\mingw64 
C:\Users\Vitus\scoop\apps\msys2\2021-06-04\mingw64\bin (auch nötig!) 
C:\Users\Vitus\scoop\apps\msys2\2021-06-04\usr\bin (für gcc für org-roam!) 
Fonts installieren: Computer Modern, Fira Code Retina 
customize-themes → spacemacs-themes 
C:\Users\Vitus\scoop\apps\msys2\2021-06-04\mingw64\share\texmf-dist\tex\latex → fitch-Ordner hinzufügen 
Konfigurationsdateien in emacs-Ordner schieben 
Emacs Server: 
emacs daemon.Ink in Autostart ziehen 
tex-Dateien standardmäßig mit emacs shortcut.Ink öffnen 
Variable konfigurieren: TeX-fold-env-spec-list → anzeigename in eckigen Klammern, Umgebungsname ohne 
RefTeX einstellen: 
Zotero: 
BetterBibTeX installieren 
Sammlung exportieren → Better BibTeX → halte aktuell 
.bib-Datei in Ordner speichern, in dem auch die .tex-Datei ist 
In citations.el setq reftex-default-bibliography auf den Pfad der Standard-.bib-Datei setzen 
Systemlokale ändern, damit emacsclientw.exe auch Pfade, in denen Umlaute vorkommen, lesen kann 
Standardprogramm für .tex-Dateien auf Verknüpfung in Konfiguration setzen 
Org-roam: emacsql-sqlite.exe in C:\Users\Vitus\scoop\.emacs.d\elpa\emacsql-sqlite-20190727.1710\sqlite verschieben (ggf. alte Datei ersetzen) 
 
Anderes: 
headline zu org-transclusion-live-sync-enclosing-element hinzufügen:  '(center-block … headline ) 
Org-capture: 
https://orgmode.org/worg/org-contrib/org-protocol.html#orgf887c97 für org-capture ( 
https://github.com/sprig/org-capture-extension 
LaTeX: 
Präambel: 
\usepackage[backend=biber,style=apa,uniquelist=false]{biblatex} 
\addbibresource{Dateiname.bib} 
Vorm Ende des Dokuments: \printbibliography 
C-c [, um zu zitieren 
Index: https://robjhyndman.com/hyndsight/indexing-in-latex/ 
 
Mit neuer Installation: 
    • Graphviz 
    • Gcc 
    • Pdf-tools aus emax-Ordner in .emacs.d/elpa/ ziehen und altes pdf-tools ersetzen 
Links: 
Tool Time Session 1: Emacs Basics 
Suchen und Ersetzen im gesamten Dokument 
Spellchecking I, Spellchecking II 
 
Rechtschreibprüfung abhängig von babel-Befehl in LaTeX 
https://emacs.stackexchange.com/questions/48283/compile-latex-without-saving-and-without-query 
 
https://stackoverflow.com/questions/18770669/how-can-i-save-as-in-emacs-without-visiting-the-new-file 
 
https://iflysib.unlp.edu.ar/tomas/blog/reference-management.html 
 
Fett, kursiv usw. mit üblichen Word-Befehlen! 
 
Literaturverwaltung: 
https://emacs.stackexchange.com/questions/24725/zotero-workflow-into-emacs 
(emacs-zotero-bib-fetch) 
 
https://lepisma.xyz/wiki/emacs/org-mode/references.html (aktuell) 
 
https://tex.stackexchange.com/questions/290873/howto-use-okular-with-emacs-auctex (okular) 
 
https://www.emacswiki.org/emacs/AUCTeX#h5o-7 (Auctex + Zotero) 
 
https://emacs.stackexchange.com/questions/21588/set-latex-preview-pane-mode-as-default-pdf-viewer-for-acutex 
 
https://stackoverflow.com/questions/738755/dont-make-me-manually-abort-a-latex-compile-when-theres-an-error 
 
https://www.reddit.com/r/emacs/comments/3q3l4x/anyone_using_emacsauctexlatexpreviewpane_with/ 
 
https://stackoverflow.com/questions/2199678/how-to-call-latexmk-in-emacs-and-jump-to-next-error 
 
https://tex.stackexchange.com/questions/88612/folding-entire-section-in-auctex 
 
https://tex.stackexchange.com/questions/39817/how-can-i-make-auctex-use-the-spelling-dictionary-in-the-same-language-as-babel/39818#39818 
 
https://stackoverflow.com/questions/8052504/inputting-latex-without-rsi/8055820#8055820 
 
https://tex.stackexchange.com/questions/22431/everyday-latex-and-workflow/22443#22443 
 
https://emacs.stackexchange.com/questions/712/what-are-the-differences-between-autocomplete-and-company-mode 
https://iqss.github.io/IQSS.emacs/init.html 
https://emacs.stackexchange.com/questions/2538/how-to-define-additional-mode-specific-pairs-for-electric-pair-mode 
https://emacs.stackexchange.com/questions/361/how-can-i-hide-display-latex-section-just-like-org-mode-does-with-headlines 
 
https://emacs.stackexchange.com/questions/5938/how-to-make-auto-complete-work-in-auctex-mode 
https://github.com/Fuco1/smartparens/wiki/Tips-and-tricks#use-sp-select-next-thing-with-wrapping 
Logic of ending time 
https://github.com/Fuco1/smartparens/issues/990 
https://github.com/redguardtoo/wucuo 
https://mathoverflow.net/questions/365387/time-saving-technology-tricks-for-writing-papers 
https://github.com/nidrissi/dotfiles/blob/master/config/emacs/emacs.org#latex-1 
<<de_DE_frami.dic>>
<<de_DE_frami.aff>>
pacman -S mingw-w64-x86_64-texlive-lang-german 
<<Symbola.ttf>>
<<FiraCode-Retina.ttf>>
https://org-roam.discourse.group/t/new-zotero-pdf-reader-and-org-roam-org-roam-bibtex-workflow/1364 
pacman -S mingw-w64-x86_64-evince 


https://www.emacswiki.org/emacs/EmacsMsWindowsIntegration#h5o-6

https://www.reddit.com/r/emacs/comments/n8jd7z/emacs_msys2_windows_task_scheduler_a_love_story/

emacsk

https://www.reddit.com/r/emacs/comments/8b9rvc/windows_emacs_in_taskbar_avoid_having_two_icons/
