Debugger entered--Lisp error: (error "File \"/tmp/orgtexOgtMg8.xdv\" wasn’t produced.  Please adjust ‘dvisvgm’ part of ‘org-preview-latex-pr...")
  signal(error ("File \"/tmp/orgtexOgtMg8.xdv\" wasn’t produced.  Please adjust ‘dvisvgm’ part of ‘org-preview-latex-pr..."))
  error("File \"/tmp/orgtexOgtMg8.xdv\" wasn't produced.  Ple...")
  org-compile-file("/tmp/orgtexOgtMg8.tex" ("xelatex -no-pdf -interaction nonstopmode -output-d...") "xdv" "Please adjust `dvisvgm' part of `org-preview-latex..." #<buffer *Org Preview LaTeX Output*>)
  org-create-formula-image("\\begin{hi}\n\\end{hi}\n" "/media/storage/sciebo privat/org-mode/previews/try..." (:foreground default :background default :scale 1.0 :html-foreground "#AAA7B3" :html-background nil :html-scale 1.0 :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")) nil dvisvgm)
  org-format-latex("/media/storage/sciebo privat/org-mode/previews/try" nil nil "/home/vitus/Github/opensource-philosophy/raw_org_f..." nil "Creating LaTeX Image..." nil dvisvgm)
  org-html-format-latex("\\begin{hi}\n\\end{hi}\n" dvisvgm (:export-options nil :back-end #s(org-export-backend :name hugo :parent blackfriday :transcoders ((code . org-hugo-kbd-tags-maybe) (example-block . org-hugo-example-block) (export-block . org-hugo-export-block) (export-snippet . org-hugo-export-snippet) (headline . org-hugo-heading) (inner-template . org-hugo-inner-template) (inline-src-block . org-hugo-inline-src-block) (keyword . org-hugo-keyword) (link . org-hugo-link) (paragraph . org-hugo-paragraph) (src-block . org-hugo-src-block) (special-block . org-hugo-special-block)) :options ((:with-toc nil "toc" org-hugo-export-with-toc) (:section-numbers nil "num" org-hugo-export-with-section-numbers) (:author "AUTHOR" nil user-full-name newline) (:creator "CREATOR" nil org-hugo-export-creator-string) (:with-smart-quotes nil "'" nil) (:with-special-strings nil "-" nil) (:with-sub-superscript nil "^" ...) (:hugo-with-locale "HUGO_WITH_LOCALE" nil nil) (:hugo-front-matter-format "HUGO_FRONT_MATTER_FORMAT" nil org-hugo-front-matter-format) (:hugo-level-offset "HUGO_LEVEL_OFFSET" nil "1") (:hugo-preserve-filling "HUGO_PRESERVE_FILLING" nil org-hugo-preserve-filling) (:hugo-delete-trailing-ws "HUGO_DELETE_TRAILING_WS" nil org-hugo-delete-trailing-ws) (:hugo-section "HUGO_SECTION" nil org-hugo-section) (:hugo-bundle "HUGO_BUNDLE" nil nil) (:hugo-base-dir "HUGO_BASE_DIR" nil org-hugo-base-dir) (:hugo-goldmark "HUGO_GOLDMARK" nil org-hugo-goldmark) (:hugo-code-fence "HUGO_CODE_FENCE" nil t) (:hugo-use-code-for-kbd "HUGO_USE_CODE_FOR_KBD" nil org-hugo-use-code-for-kbd) (:hugo-prefer-hyphen-in-tags "HUGO_PREFER_HYPHEN_IN_TAGS" nil org-hugo-prefer-hyphen-in-tags) (:hugo-allow-spaces-in-tags "HUGO_ALLOW_SPACES_IN_TAGS" nil org-hugo-allow-spaces-in-tags) (:hugo-auto-set-lastmod "HUGO_AUTO_SET_LASTMOD" nil org-hugo-auto-set-lastmod) (:hugo-custom-front-matter "HUGO_CUSTOM_FRONT_MATTER" nil nil space) (:hugo-blackfriday "HUGO_BLACKFRIDAY" nil nil space) (:hugo-front-matter-key-replace "HUGO_FRONT_MATTER_KEY_REPLACE" nil nil space) (:hugo-date-format "HUGO_DATE_FORMAT" nil org-hugo-date-format) (:hugo-paired-shortcodes "HUGO_PAIRED_SHORTCODES" nil org-hugo-paired-shortcodes space) (:hugo-pandoc-citations "HUGO_PANDOC_CITATIONS" nil nil) (:bibliography "BIBLIOGRAPHY" nil nil newline) (:html-container "HTML_CONTAINER" nil org-hugo-container-element) (:html-container-class "HTML_CONTAINER_CLASS" nil "") (:hugo-aliases "HUGO_ALIASES" nil nil space) (:hugo-audio "HUGO_AUDIO" nil nil) ...) :filters ((:filter-body . org-hugo-body-filter)) :blocks nil :menu (72 "Export to Hugo-compatible Markdo..." (... ... ... ... ... ...))) :translate-alist ((code . org-hugo-kbd-tags-maybe) (example-block . org-hugo-example-block) (export-block . org-hugo-export-block) (export-snippet . org-hugo-export-snippet) (headline . org-hugo-heading) (inner-template . org-hugo-inner-template) (inline-src-block . org-hugo-inline-src-block) (keyword . org-hugo-keyword) (link . org-hugo-link) (paragraph . org-hugo-paragraph) (src-block . org-hugo-src-block) (special-block . org-hugo-special-block) (center-block . org-blackfriday-center-block) (example-block . org-blackfriday-example-block) (fixed-width . org-blackfriday-fixed-width) (footnote-reference . org-blackfriday-footnote-reference) (inner-template . org-blackfriday-inner-template) (italic . org-blackfriday-italic) (item . org-blackfriday-item) (latex-environment . org-blackfriday-latex-environment) (latex-fragment . org-blackfriday-latex-fragment) (line-break . org-html-line-break) (plain-list . org-blackfriday-plain-list) (plain-text . org-blackfriday-plain-text) (quote-block . org-blackfriday-quote-block) (radio-target . org-blackfriday-radio-target) (special-block . org-blackfriday-special-block) (src-block . org-blackfriday-src-block) (strike-through . org-blackfriday-strike-through) (table-cell . org-blackfriday-table-cell) (table-row . org-blackfriday-table-row) (table . org-blackfriday-table) ...) :exported-data #<hash-table eq 10/4001 0x157c9b9b9ed7> :input-buffer "try.org" :input-file "/home/vitus/Github/opensource-ph..." :with-toc nil :section-numbers nil :author "Vitus Schäfftlein" :creator "Emacs 28.1 (Org mode 9.5.2 + ox-..." :with-smart-quotes nil :with-special-strings nil :with-sub-superscript {} :hugo-with-locale nil :hugo-front-matter-format "toml" :hugo-level-offset "1" ...))
  (let ((formula-link (org-html-format-latex (if (eq nil (org-html--math-environment-p latex-environment)) latex-frag (org-html--unlabel-latex-environment latex-frag)) processing-type info))) (if (and formula-link (string-match "file:\\([^]]*\\)" formula-link)) (progn (let ((source (org-export-file-uri (match-string 1 formula-link)))) (org-html--wrap-latex-environment (org-html--format-image source attributes info) info caption label)))))
  (cond ((memq processing-type '(t mathjax)) (org-html-format-latex (if (org-string-nw-p label) (replace-regexp-in-string "\\`.*" (format "\\&\n\\\\label{%s}" label) latex-frag) latex-frag) 'mathjax info)) ((assq processing-type org-preview-latex-process-alist) (let ((formula-link (org-html-format-latex (if (eq nil ...) latex-frag (org-html--unlabel-latex-environment latex-frag)) processing-type info))) (if (and formula-link (string-match "file:\\([^]]*\\)" formula-link)) (progn (let ((source ...)) (org-html--wrap-latex-environment (org-html--format-image source attributes info) info caption label)))))) (t (org-html--wrap-latex-environment latex-frag info caption label)))
  (let ((processing-type (plist-get info :with-latex)) (latex-frag (org-remove-indentation (org-element-property :value latex-environment))) (attributes (org-export-read-attribute :attr_html latex-environment)) (label (org-html--reference latex-environment info t)) (caption (and (org-html--latex-environment-numbered-p latex-environment) (number-to-string (org-export-get-ordinal latex-environment info nil #'(lambda ... ...)))))) (cond ((memq processing-type '(t mathjax)) (org-html-format-latex (if (org-string-nw-p label) (replace-regexp-in-string "\\`.*" (format "\\&\n\\\\label{%s}" label) latex-frag) latex-frag) 'mathjax info)) ((assq processing-type org-preview-latex-process-alist) (let ((formula-link (org-html-format-latex (if ... latex-frag ...) processing-type info))) (if (and formula-link (string-match "file:\\([^]]*\\)" formula-link)) (progn (let (...) (org-html--wrap-latex-environment ... info caption label)))))) (t (org-html--wrap-latex-environment latex-frag info caption label))))
  org-html-latex-environment((latex-environment (:begin 341 :end 362 :value "\\begin{hi}\n\\end{hi}\n" :post-blank 1 :post-affiliated 341 :parent (section (:begin 1 :end 390 :contents-begin 1 :contents-end 390 :post-blank 1 :post-affiliated 1 :parent ...) (keyword ...) (keyword ...) (keyword ...) (keyword ...) (keyword ...) (keyword ...) (keyword ...) (keyword ...) (keyword ...) (latex-environment ...) #1 (latex-environment ...)))) nil (:export-options nil :back-end #s(org-export-backend :name hugo :parent blackfriday :transcoders ((code . org-hugo-kbd-tags-maybe) (example-block . org-hugo-example-block) (export-block . org-hugo-export-block) (export-snippet . org-hugo-export-snippet) (headline . org-hugo-heading) (inner-template . org-hugo-inner-template) (inline-src-block . org-hugo-inline-src-block) (keyword . org-hugo-keyword) (link . org-hugo-link) (paragraph . org-hugo-paragraph) (src-block . org-hugo-src-block) (special-block . org-hugo-special-block)) :options ((:with-toc nil "toc" org-hugo-export-with-toc) (:section-numbers nil "num" org-hugo-export-with-section-numbers) (:author "AUTHOR" nil user-full-name newline) (:creator "CREATOR" nil org-hugo-export-creator-string) (:with-smart-quotes nil "'" nil) (:with-special-strings nil "-" nil) (:with-sub-superscript nil "^" ...) (:hugo-with-locale "HUGO_WITH_LOCALE" nil nil) (:hugo-front-matter-format "HUGO_FRONT_MATTER_FORMAT" nil org-hugo-front-matter-format) (:hugo-level-offset "HUGO_LEVEL_OFFSET" nil "1") (:hugo-preserve-filling "HUGO_PRESERVE_FILLING" nil org-hugo-preserve-filling) (:hugo-delete-trailing-ws "HUGO_DELETE_TRAILING_WS" nil org-hugo-delete-trailing-ws) (:hugo-section "HUGO_SECTION" nil org-hugo-section) (:hugo-bundle "HUGO_BUNDLE" nil nil) (:hugo-base-dir "HUGO_BASE_DIR" nil org-hugo-base-dir) (:hugo-goldmark "HUGO_GOLDMARK" nil org-hugo-goldmark) (:hugo-code-fence "HUGO_CODE_FENCE" nil t) (:hugo-use-code-for-kbd "HUGO_USE_CODE_FOR_KBD" nil org-hugo-use-code-for-kbd) (:hugo-prefer-hyphen-in-tags "HUGO_PREFER_HYPHEN_IN_TAGS" nil org-hugo-prefer-hyphen-in-tags) (:hugo-allow-spaces-in-tags "HUGO_ALLOW_SPACES_IN_TAGS" nil org-hugo-allow-spaces-in-tags) (:hugo-auto-set-lastmod "HUGO_AUTO_SET_LASTMOD" nil org-hugo-auto-set-lastmod) (:hugo-custom-front-matter "HUGO_CUSTOM_FRONT_MATTER" nil nil space) (:hugo-blackfriday "HUGO_BLACKFRIDAY" nil nil space) (:hugo-front-matter-key-replace "HUGO_FRONT_MATTER_KEY_REPLACE" nil nil space) (:hugo-date-format "HUGO_DATE_FORMAT" nil org-hugo-date-format) (:hugo-paired-shortcodes "HUGO_PAIRED_SHORTCODES" nil org-hugo-paired-shortcodes space) (:hugo-pandoc-citations "HUGO_PANDOC_CITATIONS" nil nil) (:bibliography "BIBLIOGRAPHY" nil nil newline) (:html-container "HTML_CONTAINER" nil org-hugo-container-element) (:html-container-class "HTML_CONTAINER_CLASS" nil "") (:hugo-aliases "HUGO_ALIASES" nil nil space) (:hugo-audio "HUGO_AUDIO" nil nil) ...) :filters ((:filter-body . org-hugo-body-filter)) :blocks nil :menu (72 "Export to Hugo-compatible Markdo..." (... ... ... ... ... ...))) :translate-alist ((code . org-hugo-kbd-tags-maybe) (example-block . org-hugo-example-block) (export-block . org-hugo-export-block) (export-snippet . org-hugo-export-snippet) (headline . org-hugo-heading) (inner-template . org-hugo-inner-template) (inline-src-block . org-hugo-inline-src-block) (keyword . org-hugo-keyword) (link . org-hugo-link) (paragraph . org-hugo-paragraph) (src-block . org-hugo-src-block) (special-block . org-hugo-special-block) (center-block . org-blackfriday-center-block) (example-block . org-blackfriday-example-block) (fixed-width . org-blackfriday-fixed-width) (footnote-reference . org-blackfriday-footnote-reference) (inner-template . org-blackfriday-inner-template) (italic . org-blackfriday-italic) (item . org-blackfriday-item) (latex-environment . org-blackfriday-latex-environment) (latex-fragment . org-blackfriday-latex-fragment) (line-break . org-html-line-break) (plain-list . org-blackfriday-plain-list) (plain-text . org-blackfriday-plain-text) (quote-block . org-blackfriday-quote-block) (radio-target . org-blackfriday-radio-target) (special-block . org-blackfriday-special-block) (src-block . org-blackfriday-src-block) (strike-through . org-blackfriday-strike-through) (table-cell . org-blackfriday-table-cell) (table-row . org-blackfriday-table-row) (table . org-blackfriday-table) ...) :exported-data #<hash-table eq 10/4001 0x157c9b9b9ed7> :input-buffer "try.org" :input-file "/home/vitus/Github/opensource-ph..." :with-toc nil :section-numbers nil :author "Vitus Schäfftlein" :creator "Emacs 28.1 (Org mode 9.5.2 + ox-..." :with-smart-quotes nil :with-special-strings nil :with-sub-superscript {} :hugo-with-locale nil :hugo-front-matter-format "toml" :hugo-level-offset "1" ...))
  org-blackfriday-latex-environment((latex-environment (:begin 341 :end 362 :value "\\begin{hi}\n\\end{hi}\n" :post-blank 1 :post-affiliated 341 :parent (section (:begin 1 :end 390 :contents-begin 1 :contents-end 390 :post-blank 1 :post-affiliated 1 :parent ...) (keyword ...) (keyword ...) (keyword ...) (keyword ...) (keyword ...) (keyword ...) (keyword ...) (keyword ...) (keyword ...) (latex-environment ...) #1 (latex-environment ...)))) nil (:export-options nil :back-end #s(org-export-backend :name hugo :parent blackfriday :transcoders ((code . org-hugo-kbd-tags-maybe) (example-block . org-hugo-example-block) (export-block . org-hugo-export-block) (export-snippet . org-hugo-export-snippet) (headline . org-hugo-heading) (inner-template . org-hugo-inner-template) (inline-src-block . org-hugo-inline-src-block) (keyword . org-hugo-keyword) (link . org-hugo-link) (paragraph . org-hugo-paragraph) (src-block . org-hugo-src-block) (special-block . org-hugo-special-block)) :options ((:with-toc nil "toc" org-hugo-export-with-toc) (:section-numbers nil "num" org-hugo-export-with-section-numbers) (:author "AUTHOR" nil user-full-name newline) (:creator "CREATOR" nil org-hugo-export-creator-string) (:with-smart-quotes nil "'" nil) (:with-special-strings nil "-" nil) (:with-sub-superscript nil "^" ...) (:hugo-with-locale "HUGO_WITH_LOCALE" nil nil) (:hugo-front-matter-format "HUGO_FRONT_MATTER_FORMAT" nil org-hugo-front-matter-format) (:hugo-level-offset "HUGO_LEVEL_OFFSET" nil "1") (:hugo-preserve-filling "HUGO_PRESERVE_FILLING" nil org-hugo-preserve-filling) (:hugo-delete-trailing-ws "HUGO_DELETE_TRAILING_WS" nil org-hugo-delete-trailing-ws) (:hugo-section "HUGO_SECTION" nil org-hugo-section) (:hugo-bundle "HUGO_BUNDLE" nil nil) (:hugo-base-dir "HUGO_BASE_DIR" nil org-hugo-base-dir) (:hugo-goldmark "HUGO_GOLDMARK" nil org-hugo-goldmark) (:hugo-code-fence "HUGO_CODE_FENCE" nil t) (:hugo-use-code-for-kbd "HUGO_USE_CODE_FOR_KBD" nil org-hugo-use-code-for-kbd) (:hugo-prefer-hyphen-in-tags "HUGO_PREFER_HYPHEN_IN_TAGS" nil org-hugo-prefer-hyphen-in-tags) (:hugo-allow-spaces-in-tags "HUGO_ALLOW_SPACES_IN_TAGS" nil org-hugo-allow-spaces-in-tags) (:hugo-auto-set-lastmod "HUGO_AUTO_SET_LASTMOD" nil org-hugo-auto-set-lastmod) (:hugo-custom-front-matter "HUGO_CUSTOM_FRONT_MATTER" nil nil space) (:hugo-blackfriday "HUGO_BLACKFRIDAY" nil nil space) (:hugo-front-matter-key-replace "HUGO_FRONT_MATTER_KEY_REPLACE" nil nil space) (:hugo-date-format "HUGO_DATE_FORMAT" nil org-hugo-date-format) (:hugo-paired-shortcodes "HUGO_PAIRED_SHORTCODES" nil org-hugo-paired-shortcodes space) (:hugo-pandoc-citations "HUGO_PANDOC_CITATIONS" nil nil) (:bibliography "BIBLIOGRAPHY" nil nil newline) (:html-container "HTML_CONTAINER" nil org-hugo-container-element) (:html-container-class "HTML_CONTAINER_CLASS" nil "") (:hugo-aliases "HUGO_ALIASES" nil nil space) (:hugo-audio "HUGO_AUDIO" nil nil) ...) :filters ((:filter-body . org-hugo-body-filter)) :blocks nil :menu (72 "Export to Hugo-compatible Markdo..." (... ... ... ... ... ...))) :translate-alist ((code . org-hugo-kbd-tags-maybe) (example-block . org-hugo-example-block) (export-block . org-hugo-export-block) (export-snippet . org-hugo-export-snippet) (headline . org-hugo-heading) (inner-template . org-hugo-inner-template) (inline-src-block . org-hugo-inline-src-block) (keyword . org-hugo-keyword) (link . org-hugo-link) (paragraph . org-hugo-paragraph) (src-block . org-hugo-src-block) (special-block . org-hugo-special-block) (center-block . org-blackfriday-center-block) (example-block . org-blackfriday-example-block) (fixed-width . org-blackfriday-fixed-width) (footnote-reference . org-blackfriday-footnote-reference) (inner-template . org-blackfriday-inner-template) (italic . org-blackfriday-italic) (item . org-blackfriday-item) (latex-environment . org-blackfriday-latex-environment) (latex-fragment . org-blackfriday-latex-fragment) (line-break . org-html-line-break) (plain-list . org-blackfriday-plain-list) (plain-text . org-blackfriday-plain-text) (quote-block . org-blackfriday-quote-block) (radio-target . org-blackfriday-radio-target) (special-block . org-blackfriday-special-block) (src-block . org-blackfriday-src-block) (strike-through . org-blackfriday-strike-through) (table-cell . org-blackfriday-table-cell) (table-row . org-blackfriday-table-row) (table . org-blackfriday-table) ...) :exported-data #<hash-table eq 10/4001 0x157c9b9b9ed7> :input-buffer "try.org" :input-file "/home/vitus/Github/opensource-ph..." :with-toc nil :section-numbers nil :author "Vitus Schäfftlein" :creator "Emacs 28.1 (Org mode 9.5.2 + ox-..." :with-smart-quotes nil :with-special-strings nil :with-sub-superscript {} :hugo-with-locale nil :hugo-front-matter-format "toml" :hugo-level-offset "1" ...))
  org-export-data((latex-environment (:begin 341 :end 362 :value "\\begin{hi}\n\\end{hi}\n" :post-blank 1 :post-affiliated 341 :parent (section (:begin 1 :end 390 :contents-begin 1 :contents-end 390 :post-blank 1 :post-affiliated 1 :parent ...) (keyword ...) (keyword ...) (keyword ...) (keyword ...) (keyword ...) (keyword ...) (keyword ...) (keyword ...) (keyword ...) (latex-environment ...) #1 (latex-environment ...)))) (:export-options nil :back-end #s(org-export-backend :name hugo :parent blackfriday :transcoders ((code . org-hugo-kbd-tags-maybe) (example-block . org-hugo-example-block) (export-block . org-hugo-export-block) (export-snippet . org-hugo-export-snippet) (headline . org-hugo-heading) (inner-template . org-hugo-inner-template) (inline-src-block . org-hugo-inline-src-block) (keyword . org-hugo-keyword) (link . org-hugo-link) (paragraph . org-hugo-paragraph) (src-block . org-hugo-src-block) (special-block . org-hugo-special-block)) :options ((:with-toc nil "toc" org-hugo-export-with-toc) (:section-numbers nil "num" org-hugo-export-with-section-numbers) (:author "AUTHOR" nil user-full-name newline) (:creator "CREATOR" nil org-hugo-export-creator-string) (:with-smart-quotes nil "'" nil) (:with-special-strings nil "-" nil) (:with-sub-superscript nil "^" ...) (:hugo-with-locale "HUGO_WITH_LOCALE" nil nil) (:hugo-front-matter-format "HUGO_FRONT_MATTER_FORMAT" nil org-hugo-front-matter-format) (:hugo-level-offset "HUGO_LEVEL_OFFSET" nil "1") (:hugo-preserve-filling "HUGO_PRESERVE_FILLING" nil org-hugo-preserve-filling) (:hugo-delete-trailing-ws "HUGO_DELETE_TRAILING_WS" nil org-hugo-delete-trailing-ws) (:hugo-section "HUGO_SECTION" nil org-hugo-section) (:hugo-bundle "HUGO_BUNDLE" nil nil) (:hugo-base-dir "HUGO_BASE_DIR" nil org-hugo-base-dir) (:hugo-goldmark "HUGO_GOLDMARK" nil org-hugo-goldmark) (:hugo-code-fence "HUGO_CODE_FENCE" nil t) (:hugo-use-code-for-kbd "HUGO_USE_CODE_FOR_KBD" nil org-hugo-use-code-for-kbd) (:hugo-prefer-hyphen-in-tags "HUGO_PREFER_HYPHEN_IN_TAGS" nil org-hugo-prefer-hyphen-in-tags) (:hugo-allow-spaces-in-tags "HUGO_ALLOW_SPACES_IN_TAGS" nil org-hugo-allow-spaces-in-tags) (:hugo-auto-set-lastmod "HUGO_AUTO_SET_LASTMOD" nil org-hugo-auto-set-lastmod) (:hugo-custom-front-matter "HUGO_CUSTOM_FRONT_MATTER" nil nil space) (:hugo-blackfriday "HUGO_BLACKFRIDAY" nil nil space) (:hugo-front-matter-key-replace "HUGO_FRONT_MATTER_KEY_REPLACE" nil nil space) (:hugo-date-format "HUGO_DATE_FORMAT" nil org-hugo-date-format) (:hugo-paired-shortcodes "HUGO_PAIRED_SHORTCODES" nil org-hugo-paired-shortcodes space) (:hugo-pandoc-citations "HUGO_PANDOC_CITATIONS" nil nil) (:bibliography "BIBLIOGRAPHY" nil nil newline) (:html-container "HTML_CONTAINER" nil org-hugo-container-element) (:html-container-class "HTML_CONTAINER_CLASS" nil "") (:hugo-aliases "HUGO_ALIASES" nil nil space) (:hugo-audio "HUGO_AUDIO" nil nil) ...) :filters ((:filter-body . org-hugo-body-filter)) :blocks nil :menu (72 "Export to Hugo-compatible Markdo..." (... ... ... ... ... ...))) :translate-alist ((code . org-hugo-kbd-tags-maybe) (example-block . org-hugo-example-block) (export-block . org-hugo-export-block) (export-snippet . org-hugo-export-snippet) (headline . org-hugo-heading) (inner-template . org-hugo-inner-template) (inline-src-block . org-hugo-inline-src-block) (keyword . org-hugo-keyword) (link . org-hugo-link) (paragraph . org-hugo-paragraph) (src-block . org-hugo-src-block) (special-block . org-hugo-special-block) (center-block . org-blackfriday-center-block) (example-block . org-blackfriday-example-block) (fixed-width . org-blackfriday-fixed-width) (footnote-reference . org-blackfriday-footnote-reference) (inner-template . org-blackfriday-inner-template) (italic . org-blackfriday-italic) (item . org-blackfriday-item) (latex-environment . org-blackfriday-latex-environment) (latex-fragment . org-blackfriday-latex-fragment) (line-break . org-html-line-break) (plain-list . org-blackfriday-plain-list) (plain-text . org-blackfriday-plain-text) (quote-block . org-blackfriday-quote-block) (radio-target . org-blackfriday-radio-target) (special-block . org-blackfriday-special-block) (src-block . org-blackfriday-src-block) (strike-through . org-blackfriday-strike-through) (table-cell . org-blackfriday-table-cell) (table-row . org-blackfriday-table-row) (table . org-blackfriday-table) ...) :exported-data #<hash-table eq 10/4001 0x157c9b9b9ed7> :input-buffer "try.org" :input-file "/home/vitus/Github/opensource-ph..." :with-toc nil :section-numbers nil :author "Vitus Schäfftlein" :creator "Emacs 28.1 (Org mode 9.5.2 + ox-..." :with-smart-quotes nil :with-special-strings nil :with-sub-superscript {} :hugo-with-locale nil :hugo-front-matter-format "toml" :hugo-level-offset "1" ...))
  #f(compiled-function (element) #<bytecode 0x74bf86b9a9556b0>)((latex-environment (:begin 341 :end 362 :value "\\begin{hi}\n\\end{hi}\n" :post-blank 1 :post-affiliated 341 :parent (section (:begin 1 :end 390 :contents-begin 1 :contents-end 390 :post-blank 1 :post-affiliated 1 :parent (org-data nil #15)) (keyword (:key "TITLE" :value "yep" :begin 106 :end 119 :post-blank 1 :post-affiliated 106 :parent #15)) (keyword (:key "DATE" :value "[2022-04-08 Fr]" :begin 119 :end 143 :post-blank 1 :post-affiliated 119 :parent #15)) (keyword (:key "FILETAGS" :value "logical" :begin 143 :end 163 :post-blank 1 :post-affiliated 143 :parent #15)) (keyword (:key "HUGO_BASE_DIR" :value "../" :begin 163 :end 184 :post-blank 1 :post-affiliated 163 :parent #15)) (keyword (:key "HUGO_SECTION" :value "posts" :begin 184 :end 206 :post-blank 1 :post-affiliated 184 :parent #15)) (keyword (:key "HUGO_TYPE" :value "post" :begin 206 :end 224 :post-blank 1 :post-affiliated 206 :parent #15)) (keyword (:key "HUGO_CUSTOM_FRONT_MATTER" :value ":tikzjax false" :begin 224 :end 267 :post-blank 1 :post-affiliated 224 :parent #15)) (keyword (:key "STARTUP" :value "latexpreview" :begin 267 :end 291 :post-blank 1 :post-affiliated 267 :parent #15)) (keyword (:key "OPTIONS" :value "tex:dvisvgm" :begin 291 :end 314 :post-blank 1 :post-affiliated 291 :parent #15)) (latex-environment (:begin 314 :end 341 :value "\\begin{yes}\nwat\n\\end{yes}\n" :post-blank 1 :post-affiliated 314 :parent #15)) #1 (latex-environment (:begin 362 :end 390 :value "\\begin{gather}\n\\end{gather}\n" :post-blank 1 :post-affiliated 362 :parent #15))))))
  mapconcat(#f(compiled-function (element) #<bytecode 0x74bf86b9a9556b0>) ((keyword (:key "TITLE" :value "yep" :begin 106 :end 119 :post-blank 1 :post-affiliated 106 :parent (section (:begin 1 :end 390 :contents-begin 1 :contents-end 390 :post-blank 1 :post-affiliated 1 :parent (org-data nil #19)) . #2))) (keyword (:key "DATE" :value "[2022-04-08 Fr]" :begin 119 :end 143 :post-blank 1 :post-affiliated 119 :parent (section (:begin 1 :end 390 :contents-begin 1 :contents-end 390 :post-blank 1 :post-affiliated 1 :parent (org-data nil #20)) . #2))) (keyword (:key "FILETAGS" :value "logical" :begin 143 :end 163 :post-blank 1 :post-affiliated 143 :parent (section (:begin 1 :end 390 :contents-begin 1 :contents-end 390 :post-blank 1 :post-affiliated 1 :parent (org-data nil #21)) . #2))) (keyword (:key "HUGO_BASE_DIR" :value "../" :begin 163 :end 184 :post-blank 1 :post-affiliated 163 :parent (section (:begin 1 :end 390 :contents-begin 1 :contents-end 390 :post-blank 1 :post-affiliated 1 :parent (org-data nil #22)) . #2))) (keyword (:key "HUGO_SECTION" :value "posts" :begin 184 :end 206 :post-blank 1 :post-affiliated 184 :parent (section (:begin 1 :end 390 :contents-begin 1 :contents-end 390 :post-blank 1 :post-affiliated 1 :parent (org-data nil #23)) . #2))) (keyword (:key "HUGO_TYPE" :value "post" :begin 206 :end 224 :post-blank 1 :post-affiliated 206 :parent (section (:begin 1 :end 390 :contents-begin 1 :contents-end 390 :post-blank 1 :post-affiliated 1 :parent (org-data nil #24)) . #2))) (keyword (:key "HUGO_CUSTOM_FRONT_MATTER" :value ":tikzjax false" :begin 224 :end 267 :post-blank 1 :post-affiliated 224 :parent (section (:begin 1 :end 390 :contents-begin 1 :contents-end 390 :post-blank 1 :post-affiliated 1 :parent (org-data nil #25)) . #2))) (keyword (:key "STARTUP" :value "latexpreview" :begin 267 :end 291 :post-blank 1 :post-affiliated 267 :parent (section (:begin 1 :end 390 :contents-begin 1 :contents-end 390 :post-blank 1 :post-affiliated 1 :parent (org-data nil #26)) . #2))) (keyword (:key "OPTIONS" :value "tex:dvisvgm" :begin 291 :end 314 :post-blank 1 :post-affiliated 291 :parent (section (:begin 1 :end 390 :contents-begin 1 :contents-end 390 :post-blank 1 :post-affiliated 1 :parent (org-data nil #27)) . #2))) (latex-environment (:begin 314 :end 341 :value "\\begin{yes}\nwat\n\\end{yes}\n" :post-blank 1 :post-affiliated 314 :parent (section (:begin 1 :end 390 :contents-begin 1 :contents-end 390 :post-blank 1 :post-affiliated 1 :parent (org-data nil #26)) . #2))) (latex-environment (:begin 341 :end 362 :value "\\begin{hi}\n\\end{hi}\n" :post-blank 1 :post-affiliated 341 :parent (section (:begin 1 :end 390 :contents-begin 1 :contents-end 390 :post-blank 1 :post-affiliated 1 :parent (org-data nil #27)) . #2))) (latex-environment (:begin 362 :end 390 :value "\\begin{gather}\n\\end{gather}\n" :post-blank 1 :post-affiliated 362 :parent (section (:begin 1 :end 390 :contents-begin 1 :contents-end 390 :post-blank 1 :post-affiliated 1 :parent (org-data nil #28)) . #2)))) "")
  org-export-data((section (:begin 1 :end 390 :contents-begin 1 :contents-end 390 :post-blank 1 :post-affiliated 1 :parent (org-data nil #1)) (keyword (:key "TITLE" :value "yep" :begin 106 :end 119 :post-blank 1 :post-affiliated 106 :parent #1)) (keyword (:key "DATE" :value "[2022-04-08 Fr]" :begin 119 :end 143 :post-blank 1 :post-affiliated 119 :parent #1)) (keyword (:key "FILETAGS" :value "logical" :begin 143 :end 163 :post-blank 1 :post-affiliated 143 :parent #1)) (keyword (:key "HUGO_BASE_DIR" :value "../" :begin 163 :end 184 :post-blank 1 :post-affiliated 163 :parent #1)) (keyword (:key "HUGO_SECTION" :value "posts" :begin 184 :end 206 :post-blank 1 :post-affiliated 184 :parent #1)) (keyword (:key "HUGO_TYPE" :value "post" :begin 206 :end 224 :post-blank 1 :post-affiliated 206 :parent #1)) (keyword (:key "HUGO_CUSTOM_FRONT_MATTER" :value ":tikzjax false" :begin 224 :end 267 :post-blank 1 :post-affiliated 224 :parent #1)) (keyword (:key "STARTUP" :value "latexpreview" :begin 267 :end 291 :post-blank 1 :post-affiliated 267 :parent #1)) (keyword (:key "OPTIONS" :value "tex:dvisvgm" :begin 291 :end 314 :post-blank 1 :post-affiliated 291 :parent #1)) (latex-environment (:begin 314 :end 341 :value "\\begin{yes}\nwat\n\\end{yes}\n" :post-blank 1 :post-affiliated 314 :parent #1)) (latex-environment (:begin 341 :end 362 :value "\\begin{hi}\n\\end{hi}\n" :post-blank 1 :post-affiliated 341 :parent #1)) (latex-environment (:begin 362 :end 390 :value "\\begin{gather}\n\\end{gather..." :post-blank 1 :post-affiliated 362 :parent #1))) (:export-options nil :back-end #s(org-export-backend :name hugo :parent blackfriday :transcoders (... ... ... ... ... ... ... ... ... ... ... ...) :options (... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...) :filters (...) :blocks nil :menu (72 "Export to Hugo-compatible ..." ...)) :translate-alist ((code . org-hugo-kbd-tags-maybe) (example-block . org-hugo-example-block) (export-block . org-hugo-export-block) (export-snippet . org-hugo-export-snippet) (headline . org-hugo-heading) (inner-template . org-hugo-inner-template) (inline-src-block . org-hugo-inline-src-block) (keyword . org-hugo-keyword) (link . org-hugo-link) (paragraph . org-hugo-paragraph) (src-block . org-hugo-src-block) (special-block . org-hugo-special-block) (center-block . org-blackfriday-center-block) (example-block . org-blackfriday-example-block) (fixed-width . org-blackfriday-fixed-width) (footnote-reference . org-blackfriday-footnote-reference) (inner-template . org-blackfriday-inner-template) (italic . org-blackfriday-italic) (item . org-blackfriday-item) (latex-environment . org-blackfriday-latex-environment) (latex-fragment . org-blackfriday-latex-fragment) (line-break . org-html-line-break) (plain-list . org-blackfriday-plain-list) (plain-text . org-blackfriday-plain-text) (quote-block . org-blackfriday-quote-block) (radio-target . org-blackfriday-radio-target) ...) :exported-data #<hash-table eq 10/4001 0x157c9b9b9ed7> :input-buffer "try.org" :input-file "/home/vitus/Github/opensou..." :with-toc nil :section-numbers nil :author "Vitus Schäfftlein" :creator "Emacs 28.1 (Org mode 9.5.2..." :with-smart-quotes nil :with-special-strings nil :with-sub-superscript {} ...))
  #f(compiled-function (element) #<bytecode 0x74bf86b9a9556b0>)((section (:begin 1 :end 390 :contents-begin 1 :contents-end 390 :post-blank 1 :post-affiliated 1 :parent (org-data nil #1)) (keyword (:key "TITLE" :value "yep" :begin 106 :end 119 :post-blank 1 :post-affiliated 106 :parent #1)) (keyword (:key "DATE" :value "[2022-04-08 Fr]" :begin 119 :end 143 :post-blank 1 :post-affiliated 119 :parent #1)) (keyword (:key "FILETAGS" :value "logical" :begin 143 :end 163 :post-blank 1 :post-affiliated 143 :parent #1)) (keyword (:key "HUGO_BASE_DIR" :value "../" :begin 163 :end 184 :post-blank 1 :post-affiliated 163 :parent #1)) (keyword (:key "HUGO_SECTION" :value "posts" :begin 184 :end 206 :post-blank 1 :post-affiliated 184 :parent #1)) (keyword (:key "HUGO_TYPE" :value "post" :begin 206 :end 224 :post-blank 1 :post-affiliated 206 :parent #1)) (keyword (:key "HUGO_CUSTOM_FRONT_MATTER" :value ":tikzjax false" :begin 224 :end 267 :post-blank 1 :post-affiliated 224 :parent #1)) (keyword (:key "STARTUP" :value "latexpreview" :begin 267 :end 291 :post-blank 1 :post-affiliated 267 :parent #1)) (keyword (:key "OPTIONS" :value "tex:dvisvgm" :begin 291 :end 314 :post-blank 1 :post-affiliated 291 :parent #1)) (latex-environment (:begin 314 :end 341 :value "\\begin{yes}\nwat\n\\end{yes}\n" :post-blank 1 :post-affiliated 314 :parent #1)) (latex-environment (:begin 341 :end 362 :value "\\begin{hi}\n\\end{hi}\n" :post-blank 1 :post-affiliated 341 :parent #1)) (latex-environment (:begin 362 :end 390 :value "\\begin{gather}\n\\end{gather}\n" :post-blank 1 :post-affiliated 362 :parent #1))))
  mapconcat(#f(compiled-function (element) #<bytecode 0x74bf86b9a9556b0>) ((section (:begin 1 :end 390 :contents-begin 1 :contents-end 390 :post-blank 1 :post-affiliated 1 :parent (org-data nil . #2)) (keyword (:key "TITLE" :value "yep" :begin 106 :end 119 :post-blank 1 :post-affiliated 106 :parent #3)) (keyword (:key "DATE" :value "[2022-04-08 Fr]" :begin 119 :end 143 :post-blank 1 :post-affiliated 119 :parent #3)) (keyword (:key "FILETAGS" :value "logical" :begin 143 :end 163 :post-blank 1 :post-affiliated 143 :parent #3)) (keyword (:key "HUGO_BASE_DIR" :value "../" :begin 163 :end 184 :post-blank 1 :post-affiliated 163 :parent #3)) (keyword (:key "HUGO_SECTION" :value "posts" :begin 184 :end 206 :post-blank 1 :post-affiliated 184 :parent #3)) (keyword (:key "HUGO_TYPE" :value "post" :begin 206 :end 224 :post-blank 1 :post-affiliated 206 :parent #3)) (keyword (:key "HUGO_CUSTOM_FRONT_MATTER" :value ":tikzjax false" :begin 224 :end 267 :post-blank 1 :post-affiliated 224 :parent #3)) (keyword (:key "STARTUP" :value "latexpreview" :begin 267 :end 291 :post-blank 1 :post-affiliated 267 :parent #3)) (keyword (:key "OPTIONS" :value "tex:dvisvgm" :begin 291 :end 314 :post-blank 1 :post-affiliated 291 :parent #3)) (latex-environment (:begin 314 :end 341 :value "\\begin{yes}\nwat\n\\end{yes}\n" :post-blank 1 :post-affiliated 314 :parent #3)) (latex-environment (:begin 341 :end 362 :value "\\begin{hi}\n\\end{hi}\n" :post-blank 1 :post-affiliated 341 :parent #3)) (latex-environment (:begin 362 :end 390 :value "\\begin{gather}\n\\end{gather}\n" :post-blank 1 :post-affiliated 362 :parent #3)))) "")
  org-export-data((org-data nil (section (:begin 1 :end 390 :contents-begin 1 :contents-end 390 :post-blank 1 :post-affiliated 1 :parent #1) (keyword ...) (keyword ...) (keyword ...) (keyword ...) (keyword ...) (keyword ...) (keyword ...) (keyword ...) (keyword ...) (latex-environment ...) (latex-environment ...) (latex-environment ...))) (:export-options nil :back-end #s(org-export-backend :name hugo :parent blackfriday :transcoders (... ... ... ... ... ... ... ... ... ... ... ...) :options (... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...) :filters (...) :blocks nil :menu (72 "Export to Hugo-compatible ..." ...)) :translate-alist ((code . org-hugo-kbd-tags-maybe) (example-block . org-hugo-example-block) (export-block . org-hugo-export-block) (export-snippet . org-hugo-export-snippet) (headline . org-hugo-heading) (inner-template . org-hugo-inner-template) (inline-src-block . org-hugo-inline-src-block) (keyword . org-hugo-keyword) (link . org-hugo-link) (paragraph . org-hugo-paragraph) (src-block . org-hugo-src-block) (special-block . org-hugo-special-block) (center-block . org-blackfriday-center-block) (example-block . org-blackfriday-example-block) (fixed-width . org-blackfriday-fixed-width) (footnote-reference . org-blackfriday-footnote-reference) (inner-template . org-blackfriday-inner-template) (italic . org-blackfriday-italic) (item . org-blackfriday-item) (latex-environment . org-blackfriday-latex-environment) (latex-fragment . org-blackfriday-latex-fragment) (line-break . org-html-line-break) (plain-list . org-blackfriday-plain-list) (plain-text . org-blackfriday-plain-text) (quote-block . org-blackfriday-quote-block) (radio-target . org-blackfriday-radio-target) ...) :exported-data #<hash-table eq 10/4001 0x157c9b9b9ed7> :input-buffer "try.org" :input-file "/home/vitus/Github/opensou..." :with-toc nil :section-numbers nil :author "Vitus Schäfftlein" :creator "Emacs 28.1 (Org mode 9.5.2..." :with-smart-quotes nil :with-special-strings nil :with-sub-superscript {} ...))
  org-export-as(hugo nil nil nil (:output-file "/home/vitus/Github/opensource-philosophy/content/p..."))
  org-export-to-file(hugo "/home/vitus/Github/opensource-philosophy/content/p..." nil nil nil)
  org-hugo-export-to-md(nil nil nil)
  (lambda (a s v _b) (org-hugo-export-to-md a s v))(nil nil nil nil)
  org-export-dispatch(nil)
  funcall-interactively(org-export-dispatch nil)
  call-interactively(org-export-dispatch nil nil)
  command-execute(org-export-dispatch)
